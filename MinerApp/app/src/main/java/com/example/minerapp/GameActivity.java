package com.example.minerapp;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.widget.Button;
import android.widget.GridLayout;
import android.widget.TextView;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import android.util.Log;
import android.widget.Toast;


import java.util.Random;

public class GameActivity extends AppCompatActivity {

    private GridLayout minesweeperGrid;
    private TextView timerTextView;
    private TextView scoreTextView; // –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∫–æ–≤
    private Button backButton;

    private int rowsSize; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    private int columnSize; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    private int mineCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
    private int secondsElapsed = 0;

    private boolean[][] isMine; // –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∞ –≤ –∫–ª–µ—Ç–∫–µ
    private int[][] neighborMineCount; // –•—Ä–∞–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏
    private boolean[][] isRevealed;
    private boolean[][] isFlagged; // –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–∂–æ–∫ –Ω–∞ –∫–ª–µ—Ç–∫–µ
    // –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
    private Button[][] buttons; // –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ

    private int revealedCount = 0; // –°—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
    private boolean gameOver = false;
    private int score = 0; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤
    private CountDownTimer gameTimer; // –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_game);

        minesweeperGrid = findViewById(R.id.gameGrid);
        timerTextView = findViewById(R.id.timerTextView);
        scoreTextView = findViewById(R.id.scoreTextView); // –°–≤—è–∑—ã–≤–∞–µ–º —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º XML
        backButton = findViewById(R.id.returnButton);

        String username = GameSession.getInstance().getUsername();
        String level = GameSession.getInstance().getLevel();


        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ Intent
        //Intent intent = getIntent();
        //String level = intent.getStringExtra("level"); // –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if ("easy".equals(level)) {
            rowsSize = 9;
            columnSize = 8;
            mineCount = 2; // –õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å 10
        } else if ("medium".equals(level)) {
            rowsSize = 11;
            columnSize = 8;
            mineCount = 30; // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å 30
        } else if ("hard".equals(level)) {
            rowsSize = 13;
            columnSize = 8;
            mineCount = 50; // –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å 50
        } else {
            rowsSize = 9; // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            columnSize = 8;
            mineCount = 10;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        initGame();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        backButton.setOnClickListener(v -> showExitConfirmationDialog());

        // –¢–∞–π–º–µ—Ä
        startTimer();
    }

    private void initGame() {
        isMine = new boolean[rowsSize][columnSize];
        neighborMineCount = new int[rowsSize][columnSize];
        isRevealed = new boolean[rowsSize][columnSize];
        isFlagged = new boolean[rowsSize][columnSize];
        buttons = new Button[rowsSize][columnSize];

        minesweeperGrid.setRowCount(rowsSize);
        minesweeperGrid.setColumnCount(columnSize);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω—ã
        placeMines();

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        calculateNeighborMines();

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        createButtons();
    }

    private void placeMines() {
        Random random = new Random();
        int placedMines = 0;

        while (placedMines < mineCount) {
            int row = random.nextInt(rowsSize);
            int col = random.nextInt(columnSize);

            if (!isMine[row][col]) {
                isMine[row][col] = true;
                placedMines++;
            }
        }
    }

    private void calculateNeighborMines() {
        for (int row = 0; row < rowsSize; row++) {
            for (int col = 0; col < columnSize; col++) {
                if (isMine[row][col]) continue;

                int mineCount = 0;
                for (int i = -1; i <= 1; i++) {
                    for (int j = -1; j <= 1; j++) {
                        int newRow = row + i;
                        int newCol = col + j;

                        if (newRow >= 0 && newRow < rowsSize && newCol >= 0 && newCol < columnSize && isMine[newRow][newCol]) {
                            mineCount++;
                        }
                    }
                }
                neighborMineCount[row][col] = mineCount;
            }
        }
    }

    private void createButtons() {
        for (int row = 0; row < rowsSize; row++) {
            for (int col = 0; col < columnSize; col++) {
                Button cellButton = new Button(this);
                buttons[row][col] = cellButton;

                final int currentRow = row;
                final int currentCol = col;

                cellButton.setOnClickListener(v -> {
                    if (!gameOver && !isFlagged[currentRow][currentCol]) {
                        revealCell(currentRow, currentCol);
                    }
                });

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è (—É—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–∂–∫–∞)
                cellButton.setOnLongClickListener(v -> {
                    if (!gameOver) {
                        toggleFlag(currentRow, currentCol);
                    }
                    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ –≤—ã–∑—ã–≤–∞–ª–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                });

                GridLayout.LayoutParams params = new GridLayout.LayoutParams();
                params.rowSpec = GridLayout.spec(row);
                params.columnSpec = GridLayout.spec(col);
                params.width = 120;
                params.height = 120;
                params.setMargins(2, 2, 2, 2);

                cellButton.setLayoutParams(params);
                minesweeperGrid.addView(cellButton);
            }
        }
    }

    private void toggleFlag(int row, int col) {
        Button cellButton = buttons[row][col];

        if (isFlagged[row][col]) {
            // –ï—Å–ª–∏ —Ñ–ª–∞–∂–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
            isFlagged[row][col] = false;
            cellButton.setText(""); // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Ñ–ª–∞–∂–∫–∞
        } else {
            // –ï—Å–ª–∏ —Ñ–ª–∞–∂–∫–∞ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º –µ–≥–æ
            isFlagged[row][col] = true;
            cellButton.setText("üö©"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–∂–æ–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª)
        }
    }



    private void revealCell(int row, int col) {
        if (gameOver || isRevealed[row][col] || isFlagged[row][col]) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã

        isRevealed[row][col] = true; // –û—Ç–º–µ—Ç–∏–º –∫–ª–µ—Ç–∫—É –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é

        Button cellButton = buttons[row][col];

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –∑–µ–ª–µ–Ω—ã–π –ø—Ä–∏ –µ–µ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        cellButton.setBackgroundColor(getResources().getColor(android.R.color.holo_green_light));

        if (isMine[row][col]) {
            cellButton.setText("üí£");
            cellButton.setBackgroundColor(getResources().getColor(android.R.color.holo_red_light)); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –º–∏–Ω—ã
            gameOver(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É (–≤—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å gameWon()
        }

        int mines = neighborMineCount[row][col];
        if (mines > 0) {
            cellButton.setText(String.valueOf(mines)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥
        } else {
            cellButton.setText(""); // –ï—Å–ª–∏ –º–∏–Ω –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
            // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    int newRow = row + i;
                    int newCol = col + j;

                    if (newRow >= 0 && newRow < rowsSize && newCol >= 0 && newCol < columnSize) {
                        revealCell(newRow, newCol); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
                    }
                }
            }
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –∫–ª–µ—Ç–∫—É
        score += 3;
        updateScoreDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤
        revealedCount++;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞)
        if (!gameOver && revealedCount == (rowsSize * columnSize - mineCount)) {
            gameWon(); // –ò–≥—Ä–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞
        }
    }




    private void updateScoreDisplay() {
        scoreTextView.setText("–û—á–∫–∏: " + score);
    }

    private void gameOver() {
        stopTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        gameOver = true;
        new AlertDialog.Builder(this)
                .setTitle("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")
                .setMessage("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
                .setPositiveButton("OK", (dialog, which) -> finish())
                .show();
    }

    private void gameWon() {
        stopTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        gameOver = true;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —É—Ä–æ–≤–Ω–µ
        String username = GameSession.getInstance().getUsername();
        String level = GameSession.getInstance().getLevel();
        int timeInSeconds = secondsElapsed;                  // –í—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –∏–≥—Ä—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã
        int minutes = timeInSeconds / 60;
        int seconds = timeInSeconds % 60;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        String timeFormatted = String.format("%02d:%02d", minutes, seconds);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ GameSession
        GameSession.getInstance().setTime(timeFormatted);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã)
        GameSession.getInstance().logCurrentState();        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GameSession


        Log.d("GameActivity", "Saving record");
        Log.d("GameActivity", "Username: " + username);
        Log.d("GameActivity", "Level: " + level);
        Log.d("GameActivity", "Time: " + timeFormatted);


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        DatabaseRecordsHelper dbHelper = new DatabaseRecordsHelper(this);
        boolean isRecordSaved = dbHelper.addRecord(username, level, timeFormatted);  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∫–æ—Ä–¥
        if (isRecordSaved) {
            Toast.makeText(this, "–†–µ–∫–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–∞", Toast.LENGTH_SHORT).show();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã –∏ –ø–æ–±–µ–¥–µ
        new AlertDialog.Builder(this)
                .setTitle("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
                .setMessage("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
                .setPositiveButton("OK", (dialog, which) -> finish())  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É
                .show();
    }





    private void startTimer() {
        gameTimer = new CountDownTimer(Long.MAX_VALUE, 1000) {
            @Override
            public void onTick(long millisUntilFinished) {
                int minutes = secondsElapsed / 60;
                int seconds = secondsElapsed % 60;
                timerTextView.setText(String.format("%02d:%02d", minutes, seconds));
                secondsElapsed++;
            }

            @Override
            public void onFinish() {
                // –¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –≤—Ä–µ–º—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            }
        };
        gameTimer.start(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    }

    private void stopTimer() {
        if (gameTimer != null) {
            gameTimer.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        }
    }

    private void showExitConfirmationDialog() {
        new AlertDialog.Builder(this)
                .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?")
                .setPositiveButton("–î–∞", (dialog, which) -> finish())
                .setNegativeButton("–ù–µ—Ç", null)
                .show();
    }
}
